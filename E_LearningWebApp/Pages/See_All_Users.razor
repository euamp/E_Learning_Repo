@page "/See_All_Users"
@inject IConfiguration _config
@inject HttpClient _client
@attribute [Authorize(Roles = "Admin")]


@if(notLoadedUsers)
{
    <br />
    <div class="d-flex justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="spinner-grow text-secondary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="spinner-grow text-success" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="spinner-grow text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="spinner-grow text-warning" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Username</th>
                <th scope="col">Email</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <th scope="row">@user.Id</th>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.Firstname</td>
                    <td>@user.Lastname</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    List<User> users = new List<User>();
    private string usersEndpoint = string.Empty;
    private bool notLoadedUsers = true;

    protected override async Task OnInitializedAsync()
    {
        users = await getUsers();
        notLoadedUsers = !notLoadedUsers;
    }

    private async Task<List<User>> getUsers()
    {
        usersEndpoint = _config["getAllUsers"];

        try
        {
            var result = await _client.GetFromJsonAsync<List<User>>(usersEndpoint);
            return result;
        }
        catch (Exception ex)
        {
            Console.Out.WriteLineAsync(ex.Message);
            return null;
        }
    }
}
